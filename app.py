Chave API Gemini: 
AIzaSyDKPaTD_3gh0aoUSgRzQfoLVF06ZyLCzCk

import streamlit as st
import google.generativeai as genai
import os

# --- Configura√ß√£o Inicial ---
# Use st.secrets para gerenciar a chave da API de forma segura quando for fazer o deploy
# Por enquanto, vamos pedir para o usu√°rio colar a chave na interface.
# Para desenvolvimento local, voc√™ pode descomentar a linha abaixo e colar sua chave
# os.environ['GEMINI_API_KEY'] = "SUA_CHAVE_API_AQUI" 

st.set_page_config(page_title="Resolvedor.AI", page_icon="üõ†Ô∏è")

st.title("üõ†Ô∏è Resolvedor.AI")
st.caption("Transforme seus problemas em planos de a√ß√£o.")

# --- Entrada da Chave da API e do Problema ---
# Usando um formul√°rio para agrupar as entradas
# A chave da API ser√° lida dos "Secrets" do Streamlit, n√£o mais do usu√°rio.
try:
    genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
except Exception as e:
    st.error("Ocorreu um erro na configura√ß√£o da API. O administrador foi notificado.")
    # Este erro s√≥ aparecer√° se voc√™ esquecer de configurar o segredo no Streamlit Cloud

with st.form("problem_form"):
    user_problem = st.text_area("Descreva o problema que voc√™ quer resolver:", height=150, placeholder="Ex: Meu notebook windows est√° muito lento ao iniciar")
    submitted = st.form_submit_button("Gerar Plano de A√ß√£o")

if submitted:
    if not user_problem:
        st.error("Por favor, descreva o problema que voc√™ quer resolver.")
    else:
        # O resto da l√≥gica para gerar o plano continua aqui...
        # Certifique-se de que o bloco "try/except" que gera o plano esteja corretamente alinhado aqui dentro.
    elif not user_problem:
        st.error("Por favor, descreva o problema que voc√™ quer resolver.")
    else:
        try:
            # Configura a API com a chave fornecida pelo usu√°rio
            genai.configure(api_key=api_key_input)

            # O "Mega-Prompt" - A instru√ß√£o mestre para a IA
            prompt_template = f"""
            Voc√™ √© o 'Resolvedor.AI', um especialista em criar planos de a√ß√£o claros, objetivos e f√°ceis de seguir.
            Um usu√°rio tem o seguinte problema: "{user_problem}"

            Sua tarefa √© gerar um plano de a√ß√£o em formato Markdown, seguindo estritamente a estrutura abaixo.
            Seja direto e evite frases desnecess√°rias. V√° direto ao ponto.

            ### üìù Plano de A√ß√£o: [T√≠tulo Criativo e Claro para o Problema]

            **N√≠vel de Dificuldade:** [Avalie como F√°cil, M√©dio ou Dif√≠cil]
            **Tempo Estimado:** [Ex: 15-30 minutos]

            ---

            #### üõ†Ô∏è Materiais e Ferramentas Necess√°rias
            (Se nenhum material for necess√°rio, escreva "Nenhum material necess√°rio.")
            - [ ] Item 1
            - [ ] Item 2

            ---

            #### üìã Passo a Passo da Solu√ß√£o
            1.  **Primeiro Passo:** Descri√ß√£o clara, curta e acion√°vel.
            2.  **Segundo Passo:** Descri√ß√£o clara, curta e acion√°vel.
            3.  **Continue com quantos passos forem necess√°rios...**

            ---

            #### ‚ö†Ô∏è Dicas de Seguran√ßa e Erros Comuns
            - **Cuidado:** [Alerte sobre um erro comum ou algo que o usu√°rio deve evitar].
            - **Dica Pro:** [Ofere√ßa um truque ou conselho que facilita a tarefa].
            """

            # Mostra uma mensagem enquanto o plano est√° sendo gerado
            with st.spinner("Analisando o problema e montando seu plano de a√ß√£o..."):
                model = genai.GenerativeModel('gemini-1.5-flash') # Modelo r√°pido e eficiente
                response = model.generate_content(prompt_template)
            
            st.success("Seu plano de a√ß√£o est√° pronto!")
            # Exibe a resposta formatada em Markdown
            st.markdown(response.text)

        except Exception as e:
            st.error(f"Ocorreu um erro ao se comunicar com a API. Verifique sua chave ou tente novamente. Erro: {e}")
