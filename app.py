import streamlit as st
import google.generativeai as genai
import json

# --- Configura√ß√£o da P√°gina e T√≠tulo ---
st.set_page_config(page_title="Resolvedor.AI Pro", page_icon="üí°")
st.title("üí° Resolvedor.AI Pro")
st.caption("Planos de a√ß√£o com a m√°xima qualidade de IA.")

# --- Configura√ß√£o da API ---
try:
    genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
except Exception as e:
    st.error("Ocorreu um erro na configura√ß√£o da API. O administrador foi notificado.")
    st.stop()

# --- Formul√°rio de Entrada do Problema ---
with st.form("problem_form"):
    user_problem = st.text_area(
        "Descreva o problema que voc√™ quer resolver:",
        height=150,
        placeholder="Ex: Como fazer o melhor n√≥ de gravata para um casamento?"
    )
    selected_model = 'gemini-1.5-pro'

    submitted = st.form_submit_button("Gerar Plano de A√ß√£o Inteligente")

# --- L√≥gica Principal ---
if submitted:
    if not user_problem:
        st.error("Por favor, descreva o problema que voc√™ quer resolver.")
    else:
        # AQUI EST√Å A GRANDE MUDAN√áA: O PROMPT HIPER-ESPEC√çFICO
        prompt_template = f"""
            Voc√™ √© o 'Resolvedor.AI', um especialista em criar planos de a√ß√£o mult√≠midia.
            Um usu√°rio tem o seguinte problema: "{user_problem}"

            Sua tarefa √© criar um plano de a√ß√£o detalhado, retornando a resposta EXCLUSIVAMENTE em formato JSON.
            Para cada passo da solu√ß√£o, use sua capacidade de busca avan√ßada:
            1.  Para passos que exigem uma demonstra√ß√£o em v√≠deo, use o tipo "video". Encontre no YouTube o melhor e mais relevante v√≠deo tutorial.
                A URL retornada no campo "content" DEVE OBRIGATORIAMENTE estar em um formato p√∫blico e direto do YouTube.
                Formatos v√°lidos: `https://www.youtube.com/watch?v=...` ou `https://youtu.be/...`
                N√ÉO retorne de forma alguma URLs com 'googleusercontent.com' ou qualquer outro formato de link interno. Se n√£o encontrar um v√≠deo adequado, retorne um passo do tipo "text" explicando o que fazer.
            2.  Para passos visuais simples, use o tipo "gif". A URL deve ser p√∫blica e terminar em .gif, .webp, etc.
            3.  Para todos os outros passos, use o tipo "text".

            O JSON deve seguir esta estrutura exata:
            {{
                "title": "Um t√≠tulo claro e objetivo para o plano",
                "difficulty": "F√°cil, M√©dio ou Dif√≠cil",
                "estimated_time": "Ex: 10-20 minutos",
                "steps": [
                    {{
                        "type": "text | gif | video",
                        "title": "O t√≠tulo descritivo do passo.",
                        "content": "A URL do gif, a URL do v√≠deo do YouTube ou o texto da instru√ß√£o."
                    }}
                ]
            }}

            Retorne APENAS o c√≥digo JSON, sem nenhum outro texto antes ou depois.
            """

        with st.spinner(f"Consultando o modelo {selected_model}... Buscando as melhores m√≠dias..."):
            try:
                model = genai.GenerativeModel(selected_model)
                response = model.generate_content(prompt_template)

                clean_response_text = response.text.strip().replace("```json", "").replace("```", "")

                plan = json.loads(clean_response_text)

                # --- Renderiza√ß√£o do Plano ---
                st.subheader(plan.get("title", "Seu Plano de A√ß√£o"))
                st.write(f"**Dificuldade:** {plan.get('difficulty')} | **Tempo Estimado:** {plan.get('estimated_time')}")
                st.divider()

                for i, step in enumerate(plan.get("steps", [])):
                    step_type = step.get("type")
                    step_title = step.get("title")
                    step_content = step.get("content")

                    st.markdown(f"**Passo {i+1}: {step_title}**")

                    if step_type == "text":
                        st.info(step_content)

                    elif step_type == "gif":
                        st.image(step_content, use_container_width=True)

                    elif step_type == "video":
                        st.video(step_content)
                        # LINHA DE INVESTIGA√á√ÉO: Vamos mostrar a URL exata que a IA nos deu.
                        st.code(f"URL recebida da IA: {step_content}", language=None)
                        st.markdown(f"Se o v√≠deo n√£o aparecer, [clique aqui para abrir no YouTube]({step_content})")

                    st.divider()

                st.success("Plano de a√ß√£o multim√≠dia conclu√≠do!")

            except json.JSONDecodeError:
                st.error("Ocorreu um erro ao processar a resposta da IA. A resposta n√£o estava no formato JSON esperado. Por favor, tente novamente.")
                st.text("Resposta recebida (para depura√ß√£o):")
                st.code(clean_response_text)
            except Exception as e:
                st.error(f"Ocorreu um erro inesperado: {e}")